// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Organization {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  email      String
  phone      String
  zipcode    String
  logo       String?
  orgno      String     @unique
  type       String
  size       String
  currency   String
  verified   Boolean    @default(false)
  createdAt  DateTime   @default(now())
  employees  Employee[]
  facilities Facility[]
  issues     Issue[]
  payments   Payment[]
  reports    Report[]
}

model Employee {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String
  password     String
  phone        String
  empno        String       @unique
  address      String?
  zipcode      String?
  role         String
  organization Organization @relation(fields: [orgno], references: [orgno])
  orgno        String
  issues       Issue[]
  reports      Report[]
  createdAt    DateTime     @default(now())
}

model Facility {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  cost         String
  duration     String
  availability String
  empno        String
  parameters   Json?
  organization Organization @relation(fields: [orgno], references: [orgno])
  orgno        String
  createdAt    DateTime     @default(now())
}

model Issue {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  status       String
  priority     String
  employee     Employee     @relation(fields: [empno], references: [empno])
  empno        String
  organization Organization @relation(fields: [orgno], references: [orgno])
  orgno        String
  createdAt    DateTime     @default(now())
}

model Report {
  id                       String       @id @default(auto()) @map("_id") @db.ObjectId
  accPin                   String?
  additionalNotes          String?
  contentDeclaration       Boolean      @default(false)
  createDoctordoggtAccount Boolean      @default(false)
  paidAmount               Float        @default(0)
  parentAddress            String?
  parentEmail              String
  parentFirstName          String
  parentLastName           String
  parentPhone              String
  parentZipcode            String?
  paymentMode              String?      @default("cash")
  paymentStatus            String?      @default("paid")
  petBreed                 String
  petDOB                   DateTime
  petId                    String?
  petName                  String
  petSex                   String
  petSpecies               String
  petWeight                String
  subTotal                 Float        @default(0)
  tests                    Json?
  vials                    Json?
  result                   Json?
  status                   String
  priority                 String
  employee                 Employee     @relation(fields: [empno], references: [empno])
  empno                    String
  organization             Organization @relation(fields: [orgno], references: [orgno])
  orgno                    String
  payments                 Payment[]
  createdAt                DateTime     @default(now())
}

model Payment {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  type         String
  currency     String
  totalamount  String
  status       String
  amountpaid   String
  report       Report       @relation(fields: [reportid], references: [id])
  reportid     String       @db.ObjectId
  organization Organization @relation(fields: [orgno], references: [orgno])
  orgno        String
  createdAt    DateTime     @default(now())
}
