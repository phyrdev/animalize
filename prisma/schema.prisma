// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Organization {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String
  phone        String
  zipcode      String
  logo         String?
  orgno        String        @unique
  type         String
  size         String
  currency     String
  verified     Boolean       @default(false)
  createdAt    DateTime      @default(now())
  employees    Employee[]
  facilities   Facility[]
  issues       Issue[]
  payments     Payment[]
  reports      Report[]
  vials        Vial[]
  observations Observation[]
}

model Employee {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String
  password     String
  phone        String
  empno        String        @unique
  address      String?
  zipcode      String?
  role         String
  organization Organization  @relation(fields: [orgno], references: [orgno])
  orgno        String
  issues       Issue[]
  reports      Report[]      @relation(name: "CreatedBy")
  reviewed     Report[]      @relation(name: "ReviewedBy")
  observations Observation[]
  vials        Vial[]
  payments     Payment[]
  signature    String?
  designation  String?
  createdAt    DateTime      @default(now())
}

model Facility {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  cost         String
  duration     String
  availability String
  empno        String
  parameters   Json?
  organization Organization @relation(fields: [orgno], references: [orgno])
  orgno        String
  createdAt    DateTime     @default(now())
}

model Issue {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  status       String
  priority     String
  employee     Employee     @relation(fields: [empno], references: [empno])
  empno        String
  organization Organization @relation(fields: [orgno], references: [orgno])
  orgno        String
  createdAt    DateTime     @default(now())
}

model Report {
  id                       String        @id @default(auto()) @map("_id") @db.ObjectId
  reportno                 String        @unique
  accPin                   String?
  additionalNotes          String?
  contentDeclaration       Boolean       @default(false)
  createDoctordoggyAccount Boolean       @default(false)
  parentAddress            String?
  parentEmail              String
  parentFirstName          String
  parentLastName           String
  parentPhone              String
  parentZipcode            String?
  petBreed                 String
  petDob                   DateTime
  petId                    String?
  petName                  String
  petSex                   String
  petSpecies               String
  petWeight                String
  tests                    Json?
  failStatement            String?
  status                   String        @default("S200")
  priority                 String        @default("medium")
  organization             Organization  @relation(fields: [orgno], references: [orgno])
  orgno                    String
  flagged                  Boolean       @default(false)
  vials                    Vial[]
  observations             Observation[]
  payment                  Payment?
  createdAt                DateTime      @default(now())
  createdBy                Employee      @relation(name: "CreatedBy", fields: [empno], references: [empno])
  empno                    String
  reviewedBy               Employee?     @relation(name: "ReviewedBy", fields: [pathno], references: [empno])
  pathno                   String?
}

model Vial {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  vialno       String       @unique
  organization Organization @relation(fields: [orgno], references: [orgno])
  orgno        String
  report       Report       @relation(fields: [reportno], references: [reportno])
  generatedBy  Employee     @relation(fields: [empno], references: [empno])
  empno        String
  reportno     String
  createdAt    DateTime     @default(now())
}

model Observation {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  observation  String
  report       Report       @relation(fields: [reportid], references: [id])
  reportid     String       @db.ObjectId
  organization Organization @relation(fields: [orgno], references: [orgno])
  orgno        String
  employee     Employee     @relation(fields: [empno], references: [empno])
  empno        String
  statement    String
  createdAt    DateTime     @default(now())
}

model Payment {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  currency      String
  subtotal      Float
  paymentStatus String
  paidAmount    Float
  paymentMode   String
  createdBy     Employee     @relation(fields: [empno], references: [empno])
  empno         String
  organization  Organization @relation(fields: [orgno], references: [orgno])
  orgno         String
  createdAt     DateTime     @default(now())
  report        Report       @relation(fields: [reportid], references: [id])
  reportid      String       @unique @db.ObjectId
  flagged       Boolean      @default(false)
}
